# üéÆ Exemples de Slash Commands Discord

import discord
from discord.ext import commands
from discord import app_commands

# ===============================
# üéØ EXEMPLE 1: Slash Commands Builds
# ===============================

@app_commands.command(name="build", description="üîß G√©rer vos builds gaming")
@app_commands.describe(
    action="Action √† effectuer",
    game="Jeu concern√©",
    build_name="Nom du build (pour show/save)",
    details="D√©tails du build (pour save)"
)
@app_commands.choices(action=[
    app_commands.Choice(name="üìã Lister les builds", value="list"),
    app_commands.Choice(name="üëÅÔ∏è Afficher un build", value="show"),
    app_commands.Choice(name="üíæ Sauvegarder un build", value="save"),
    app_commands.Choice(name="üóëÔ∏è Supprimer un build", value="delete")
])
@app_commands.choices(game=[
    app_commands.Choice(name="üî• Diablo 4", value="diablo4"),
    app_commands.Choice(name="üî´ Escape from Tarkov", value="tarkov"),
    app_commands.Choice(name="‚öîÔ∏è WoW Classic", value="wow_classic"),
    app_commands.Choice(name="‚ö° League of Legends", value="lol"),
    app_commands.Choice(name="üèπ Baldur's Gate 3", value="bg3")
])
async def slash_build(
    interaction: discord.Interaction,
    action: app_commands.Choice[str],
    game: app_commands.Choice[str],
    build_name: str = None,
    details: str = None
):
    """Slash command pour g√©rer les builds"""
    
    if action.value == "list":
        # Lister les builds pour le jeu
        embed = discord.Embed(
            title=f"üìã Builds {game.name}",
            color=0x7289DA
        )
        
        # Simulation de builds existants
        builds = {
            "diablo4": ["üßô‚Äç‚ôÇÔ∏è Necro Blood Surge", "üèπ Rogue Penetrating Shot", "üîÆ Sorc Chain Lightning"],
            "tarkov": ["üíÄ Budget PMC", "üëë Chad Loadout", "üéØ Sniper Setup"],
            "wow_classic": ["üõ°Ô∏è Prot Warrior", "‚ùÑÔ∏è Frost Mage", "üåø Resto Druid"]
        }
        
        if game.value in builds:
            embed.description = "\n".join([f"‚Ä¢ {build}" for build in builds[game.value]])
        else:
            embed.description = "Aucun build trouv√© pour ce jeu."
        
        await interaction.response.send_message(embed=embed)
    
    elif action.value == "show":
        if not build_name:
            await interaction.response.send_message("‚ùå Nom du build requis pour l'affichage!", ephemeral=True)
            return
        
        # Afficher un build sp√©cifique
        embed = discord.Embed(
            title=f"üîß Build: {build_name}",
            description=f"Build pour {game.name}",
            color=0x00FF7F
        )
        
        # Exemple de build d√©taill√©
        if game.value == "diablo4" and "necro" in build_name.lower():
            embed.add_field(name="‚öîÔ∏è Comp√©tences", value="‚Ä¢ Blood Surge (MAX)\n‚Ä¢ Corpse Explosion\n‚Ä¢ Bone Armor", inline=True)
            embed.add_field(name="üõ°Ô∏è √âquipement", value="‚Ä¢ Bloodless Scream\n‚Ä¢ Temerity\n‚Ä¢ Ring of Starless Skies", inline=True)
            embed.add_field(name="üéØ Stats Priorit√©", value="1. Vulnerable Damage\n2. Crit Strike Damage\n3. Core Skill Damage", inline=False)
        
        await interaction.response.send_message(embed=embed)
    
    elif action.value == "save":
        if not build_name or not details:
            await interaction.response.send_message("‚ùå Nom et d√©tails du build requis pour la sauvegarde!", ephemeral=True)
            return
        
        # Sauvegarder le build
        embed = discord.Embed(
            title="üíæ Build Sauvegard√©",
            description=f"**{build_name}** pour {game.name}",
            color=0x00FF7F
        )
        embed.add_field(name="üìù D√©tails", value=details[:200] + "..." if len(details) > 200 else details, inline=False)
        embed.add_field(name="üë§ Auteur", value=interaction.user.mention, inline=True)
        
        await interaction.response.send_message(embed=embed)

# ===============================
# üéØ EXEMPLE 2: Slash Commands √âv√©nements
# ===============================

@app_commands.command(name="event", description="üìÖ G√©rer les √©v√©nements gaming")
@app_commands.describe(
    action="Action √† effectuer",
    name="Nom de l'√©v√©nement",
    game="Jeu de l'√©v√©nement",
    date="Date (format: YYYY-MM-DD HH:MM)",
    max_players="Nombre maximum de joueurs"
)
@app_commands.choices(action=[
    app_commands.Choice(name="üìÖ Cr√©er un √©v√©nement", value="create"),
    app_commands.Choice(name="üëÅÔ∏è Voir les √©v√©nements", value="list"),
    app_commands.Choice(name="‚úÖ S'inscrire", value="join"),
    app_commands.Choice(name="‚ùå Se d√©sinscrire", value="leave")
])
async def slash_event(
    interaction: discord.Interaction,
    action: app_commands.Choice[str],
    name: str = None,
    game: str = None,
    date: str = None,
    max_players: int = 10
):
    """Slash command pour g√©rer les √©v√©nements"""
    
    if action.value == "create":
        if not name or not game or not date:
            await interaction.response.send_message("‚ùå Nom, jeu et date requis pour cr√©er un √©v√©nement!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title=f"üìÖ √âv√©nement Cr√©√©: {name}",
            color=0x00FF7F,
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üéÆ Jeu", value=game, inline=True)
        embed.add_field(name="üìÖ Date", value=date, inline=True)
        embed.add_field(name="üë• Joueurs Max", value=str(max_players), inline=True)
        embed.add_field(name="üë§ Organisateur", value=interaction.user.mention, inline=True)
        
        # Ajouter boutons d'inscription
        from examples.modal_examples import EventRegistrationView
        view = EventRegistrationView()
        
        await interaction.response.send_message(embed=embed, view=view)
    
    elif action.value == "list":
        embed = discord.Embed(title="üìÖ √âv√©nements √† Venir", color=0x7289DA)
        embed.add_field(name="üè∞ Raid MC", value="WoW Classic - Demain 20h\n15/40 participants", inline=False)
        embed.add_field(name="üéØ Tournoi LoL", value="League of Legends - Samedi 14h\n8/16 √©quipes", inline=False)
        
        await interaction.response.send_message(embed=embed)

# ===============================
# üéØ EXEMPLE 3: Slash Commands IA Gaming
# ===============================

@app_commands.command(name="ai", description="ü§ñ Assistant IA Gaming")
@app_commands.describe(
    question="Votre question gaming",
    context="Contexte sp√©cifique (jeu, situation...)"
)
async def slash_ai(
    interaction: discord.Interaction,
    question: str,
    context: str = None
):
    """Slash command pour l'IA gaming"""
    
    # Defer pour √©viter le timeout (r√©ponse peut √™tre longue)
    await interaction.response.defer()
    
    try:
        # Importer et utiliser l'IA
        from utils.gemini_ai import gemini_ai
        
        if gemini_ai.is_available():
            # Ajouter le contexte si fourni
            full_question = f"{question}"
            if context:
                full_question = f"Contexte: {context}\nQuestion: {question}"
            
            # G√©n√©rer la r√©ponse
            response = await gemini_ai.gaming_assistant(full_question)
            
            # Cr√©er un embed pour la r√©ponse
            embed = discord.Embed(
                title="ü§ñ MonBotGaming AI",
                color=0x7289DA,
                timestamp=discord.utils.utcnow()
            )
            embed.add_field(name="‚ùì Question", value=question[:200] + "..." if len(question) > 200 else question, inline=False)
            
            # Diviser la r√©ponse si trop longue
            if len(response) <= 1000:
                embed.add_field(name="üí¨ R√©ponse", value=response, inline=False)
                await interaction.followup.send(embed=embed)
            else:
                # R√©ponse longue - diviser en plusieurs messages
                embed.add_field(name="üí¨ R√©ponse", value=response[:1000] + "...", inline=False)
                await interaction.followup.send(embed=embed)
                
                # Envoyer le reste en messages simples
                remaining = response[1000:]
                while remaining:
                    chunk = remaining[:1900]
                    remaining = remaining[1900:]
                    await interaction.followup.send(chunk)
        else:
            embed = discord.Embed(
                title="‚ùå IA Indisponible",
                description="L'assistant IA est temporairement indisponible.",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
    
    except Exception as e:
        print(f"Erreur IA slash command: {e}")
        embed = discord.Embed(
            title="‚ùå Erreur",
            description="Une erreur s'est produite lors du traitement de votre question.",
            color=0xFF0000
        )
        await interaction.followup.send(embed=embed)

# ===============================
# üéØ EXEMPLE 4: Slash Commands Stats
# ===============================

@app_commands.command(name="stats", description="üìä Voir les statistiques gaming")
@app_commands.describe(
    user="Utilisateur (optionnel, vous par d√©faut)",
    game="Jeu sp√©cifique (optionnel, tous par d√©faut)"
)
async def slash_stats(
    interaction: discord.Interaction,
    user: discord.Member = None,
    game: str = None
):
    """Slash command pour voir les stats"""
    
    target_user = user or interaction.user
    
    embed = discord.Embed(
        title=f"üìä Stats Gaming - {target_user.display_name}",
        color=0x00FF7F,
        timestamp=discord.utils.utcnow()
    )
    
    embed.set_thumbnail(url=target_user.avatar.url if target_user.avatar else None)
    
    if game:
        # Stats pour un jeu sp√©cifique
        embed.add_field(name=f"üéÆ {game}", value="Temps: 120h\nVictoires: 45\nK/D: 2.3", inline=False)
    else:
        # Stats g√©n√©rales
        embed.add_field(name="üéÆ Jeux Actifs", value="Diablo 4, WoW Classic, LoL", inline=False)
        embed.add_field(name="‚è±Ô∏è Temps Total", value="450 heures", inline=True)
        embed.add_field(name="üèÜ Achievements", value="23 d√©bloqu√©s", inline=True)
        embed.add_field(name="ü•á Rang Serveur", value="#15 sur 250", inline=True)
    
    await interaction.response.send_message(embed=embed)

# ===============================
# üéØ EXEMPLE 5: Slash Commands Recherche d'√âquipe
# ===============================

@app_commands.command(name="findteam", description="üë• Rechercher une √©quipe ou des co√©quipiers")
@app_commands.describe(
    game="Jeu pour lequel vous cherchez",
    role="Votre r√¥le pr√©f√©r√©",
    rank="Votre rang/niveau"
)
async def slash_findteam(
    interaction: discord.Interaction,
    game: str,
    role: str = None,
    rank: str = None
):
    """Slash command pour rechercher une √©quipe"""
    
    embed = discord.Embed(
        title="üë• Recherche d'√âquipe",
        description=f"**{interaction.user.display_name}** recherche des co√©quipiers !",
        color=0x00FF7F,
        timestamp=discord.utils.utcnow()
    )
    
    embed.set_thumbnail(url=interaction.user.avatar.url if interaction.user.avatar else None)
    embed.add_field(name="üéÆ Jeu", value=game, inline=True)
    embed.add_field(name="üéØ R√¥le", value=role or "Flexible", inline=True)
    embed.add_field(name="üèÜ Rang", value=rank or "Non sp√©cifi√©", inline=True)
    
    # Boutons pour r√©pondre
    from examples.modal_examples import TeamResponseView
    view = TeamResponseView(interaction.user.id)
    
    await interaction.response.send_message(embed=embed, view=view)

# ===============================
# üéØ Configuration des Slash Commands
# ===============================

async def setup_slash_commands(bot):
    """Enregistrer les slash commands"""
    
    # Ajouter les commandes au bot
    bot.tree.add_command(slash_build)
    bot.tree.add_command(slash_event)
    bot.tree.add_command(slash_ai)
    bot.tree.add_command(slash_stats)
    bot.tree.add_command(slash_findteam)
    
    # Synchroniser avec Discord
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ {len(synced)} slash commands synchronis√©es")
    except Exception as e:
        print(f"‚ùå Erreur sync slash commands: {e}")

# ===============================
# üéØ Auto-compl√©tion avanc√©e
# ===============================

@slash_build.autocomplete('build_name')
async def build_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> list[app_commands.Choice[str]]:
    """Auto-compl√©tion pour les noms de builds"""
    
    # Simulation de builds existants bas√©s sur le jeu s√©lectionn√©
    builds_db = {
        "diablo4": ["Necro Blood Surge", "Rogue Penetrating Shot", "Sorc Chain Lightning", "Barbarian Upheaval"],
        "tarkov": ["Budget PMC", "Chad Loadout", "Sniper Setup", "Pistol Run"],
        "wow_classic": ["Prot Warrior", "Frost Mage", "Resto Druid", "Combat Rogue"]
    }
    
    # R√©cup√©rer le jeu s√©lectionn√© (si possible)
    # Note: Dans un vrai scenario, on acc√©derait √† la valeur du param√®tre 'game'
    all_builds = []
    for game_builds in builds_db.values():
        all_builds.extend(game_builds)
    
    # Filtrer selon la saisie actuelle
    filtered_builds = [
        app_commands.Choice(name=build, value=build.lower().replace(" ", "_"))
        for build in all_builds
        if current.lower() in build.lower()
    ]
    
    # Retourner max 25 r√©sultats (limite Discord)
    return filtered_builds[:25]

@slash_ai.autocomplete('context')
async def context_autocomplete(
    interaction: discord.Interaction,
    current: str,
) -> list[app_commands.Choice[str]]:
    """Auto-compl√©tion pour le contexte IA"""
    
    contexts = [
        "Diablo 4 - Build optimization",
        "WoW Classic - Raid strategy", 
        "Tarkov - Weapon builds",
        "LoL - Meta builds",
        "General gaming question",
        "PvP strategy",
        "PvE optimization",
        "Equipment recommendations"
    ]
    
    filtered_contexts = [
        app_commands.Choice(name=ctx, value=ctx)
        for ctx in contexts
        if current.lower() in ctx.lower()
    ]
    
    return filtered_contexts[:25]
