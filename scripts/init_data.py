#!/usr/bin/env python3
"""
üîß Script d'initialisation des donn√©es du bot
Cr√©e les fichiers de donn√©es r√©els √† partir des templates si ils n'existent pas.
"""

import json
import os
from pathlib import Path
from datetime import datetime

def create_data_files():
    """Cr√©e les fichiers de donn√©es r√©els √† partir des templates."""
    
    data_dir = Path("data")
    
    # Mapping template -> fichier r√©el
    files_to_create = {
        "users.template.json": "users.json",
        "builds.template.json": "builds.json", 
        "events.template.json": "events.json"
    }
    
    print("üîß Initialisation des fichiers de donn√©es...")
    
    for template_file, real_file in files_to_create.items():
        template_path = data_dir / template_file
        real_path = data_dir / real_file
        
        # Si le fichier r√©el n'existe pas, le cr√©er
        if not real_path.exists():
            if template_path.exists():
                print(f"üìÑ Cr√©ation de {real_file} √† partir du template...")
                
                # Charger le template
                with open(template_path, 'r', encoding='utf-8') as f:
                    template_data = json.load(f)
                
                # Cr√©er la structure de base (vide mais valide)
                if "users" in template_file:
                    initial_data = {
                        "users": {},
                        "metadata": {
                            "created": datetime.utcnow().isoformat() + "Z",
                            "version": "1.0",
                            "total_users": 0
                        }
                    }
                elif "builds" in template_file:
                    initial_data = {
                        "builds": {},
                        "metadata": {
                            "created": datetime.utcnow().isoformat() + "Z", 
                            "version": "1.0",
                            "total_builds": 0
                        }
                    }
                elif "events" in template_file:
                    initial_data = {
                        "events": {},
                        "metadata": {
                            "created": datetime.utcnow().isoformat() + "Z",
                            "version": "1.0", 
                            "total_events": 0
                        }
                    }
                
                # Sauvegarder le fichier r√©el
                with open(real_path, 'w', encoding='utf-8') as f:
                    json.dump(initial_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ {real_file} cr√©√© avec succ√®s")
            else:
                print(f"‚ùå Template {template_file} introuvable")
        else:
            print(f"‚ÑπÔ∏è  {real_file} existe d√©j√†, ignor√©")
    
    print("\nüõ°Ô∏è  RAPPEL S√âCURIT√â:")
    print("   - Les fichiers de donn√©es r√©els ne sont PAS versionn√©s")
    print("   - Ils contiennent des donn√©es sensibles des membres") 
    print("   - Pensez √† faire des backups s√©curis√©s r√©guliers")
    print("   - En cas de probl√®me, supprimez les fichiers et relancez ce script")

def check_data_integrity():
    """V√©rifie l'int√©grit√© des fichiers de donn√©es."""
    
    data_dir = Path("data")
    files_to_check = ["users.json", "builds.json", "events.json"]
    
    print("\nüîç V√©rification de l'int√©grit√© des donn√©es...")
    
    for file_name in files_to_check:
        file_path = data_dir / file_name
        
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                print(f"‚úÖ {file_name} : structure JSON valide")
                
                # V√©rifications sp√©cifiques
                if "metadata" in data:
                    print(f"   üìä Cr√©√© le : {data['metadata'].get('created', 'Inconnu')}")
                
            except json.JSONDecodeError as e:
                print(f"‚ùå {file_name} : JSON invalide - {e}")
            except Exception as e:
                print(f"‚ùå {file_name} : Erreur - {e}")
        else:
            print(f"‚ö†Ô∏è  {file_name} : Fichier manquant")

if __name__ == "__main__":
    print("üöÄ Initialisation des donn√©es MonBotGaming")
    print("=" * 50)
    
    create_data_files()
    check_data_integrity()
    
    print("\n‚ú® Initialisation termin√©e !")
