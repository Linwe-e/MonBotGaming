# ü§ñ Gestionnaire Gemini AI pour MonBotGaming
# Interface intelligente pour l'assistance gaming

import google.generativeai as genai
import os
from typing import Optional, Dict, List
from dotenv import load_dotenv

load_dotenv()

class GeminiAI:
    """
    Interface Gemini AI sp√©cialis√©e pour le gaming
    Adaptation du pattern IA de Rhodham96/DiscordBot
    """
    
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if self._is_valid_api_key(self.api_key):
            try:
                genai.configure(api_key=self.api_key)
                # Utilisation de Gemini 2.0 Flash (version stable gratuite)
                self.model = genai.GenerativeModel('gemini-2.0-flash')
                self.available = True
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur configuration Gemini 2.0: {e}")
                self.available = False
        else:
            self.available = False
    
    def _is_valid_api_key(self, api_key: str) -> bool:
        """
        Valide la cl√© API de mani√®re s√©curis√©e
        """
        if not api_key:
            return False
        
        # V√©rifications de format basiques pour une cl√© Gemini
        if len(api_key) < 20:  # Les cl√©s Gemini sont plus longues
            return False
            
        if not api_key.startswith('AIza'):  # Format typique des cl√©s Google AI
            return False
            
        # Pas de caract√®res suspects ou de placeholders √©vidents
        forbidden_patterns = ['exemple', 'test', 'placeholder', 'ici', 'cle', 'key']
        api_key_lower = api_key.lower()
        
        for pattern in forbidden_patterns:
            if pattern in api_key_lower:
                return False
        
        return True
    
    def is_available(self) -> bool:
        """
        V√©rifie si l'IA est disponible et configur√©e
        """
        return self.available
    
    async def gaming_assistant(self, question: str, game_context: str = None) -> str:
        """
        Assistant gaming principal utilisant Gemini 2.0 Flash
        """
        if not self.available:
            return "‚ùå Gemini AI non configur√© - Configure ta cl√© GEMINI_API_KEY dans .env"
        
        # Construire le prompt avec contexte gaming
        game_prompt = f"\nüéÆ Contexte de jeu : {game_context}" if game_context else ""
        
        prompt = f"""
        üéÆ ASSISTANT GAMING EXPERT

        Question : {question}{game_prompt}

        Tu es un expert gaming sp√©cialis√© dans :
        ‚Ä¢ üèóÔ∏è Builds et optimisations
        ‚Ä¢ üéØ Strat√©gies et tactiques  
        ‚Ä¢ üë• Compositions d'√©quipe
        ‚Ä¢ üìä Meta et m√©caniques de jeu
        ‚Ä¢ üé≤ Conseils pour d√©butants/experts

        Donne une r√©ponse pratique et utile pour un joueur :
        ‚Ä¢ üí° Conseils concrets
        ‚Ä¢ üìä Informations pr√©cises  
        ‚Ä¢ üéØ Actions recommand√©es

        R√©ponds en fran√ßais, 200 mots max, avec des emojis gaming.
        """
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"‚ùå Erreur Gemini 2.0 : {str(e)}"
    
    async def analyze_build(self, build_description: str, game: str = None) -> str:
        """
        Analyse un build de jeu avec Gemini 2.0
        """
        if not self.available:
            return "‚ùå Gemini AI non configur√© pour l'analyse de builds"
        
        game_context = f" pour {game}" if game else ""
        
        prompt = f"""
        üîß ANALYSTE DE BUILD GAMING

        Build{game_context} :
        {build_description}

        Analyse ce build en d√©tail :
        ‚Ä¢ ‚ö° Forces et points forts
        ‚Ä¢ ‚ö†Ô∏è Faiblesses ou points d'am√©lioration
        ‚Ä¢ üéØ Utilisation optimale (situations/activit√©s)
        ‚Ä¢ üí° Suggestions d'am√©lioration
        ‚Ä¢ üìä Note g√©n√©rale /10

        Sois constructif et pr√©cis. 250 mots max avec emojis gaming.
        """
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"‚ùå Erreur lors de l'analyse du build : {str(e)}"
    
    async def suggest_team_composition(self, game: str, activity: str, players: str) -> str:
        """
        Sugg√®re des compositions d'√©quipe optimales avec Gemini 2.0
        """
        if not self.available:
            return "‚ùå Gemini AI non configur√© pour les suggestions d'√©quipe"
        
        prompt = f"""
        üéÆ STRAT√àGE D'√âQUIPE GAMING

        Jeu : {game}
        Activit√© : {activity}  
        Joueurs : {players}

        Propose la composition optimale :
        ‚Ä¢ üë• R√¥les recommand√©s et r√©partition
        ‚Ä¢ ‚öîÔ∏è Responsabilit√©s par joueur
        ‚Ä¢ üéØ Strat√©gies et synergies
        ‚Ä¢ üí° Conseils tactiques sp√©cifiques

        200 mots max, avec emojis de r√¥les appropri√©s.
        """
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"‚ùå Erreur lors de la suggestion d'√©quipe : {str(e)}"
    
    async def generate_event_description(self, game: str, event_type: str, details: Dict) -> str:
        """
        G√©n√®re une description d'√©v√©nement gaming attractive avec Gemini 2.0
        """
        if not self.available:
            return f"üìÖ √âv√©nement {event_type} pour {game}"
        
        prompt = f"""
        üéÆ CR√âATEUR D'√âV√âNEMENT GAMING

        Jeu : {game}
        Type : {event_type}
        D√©tails : {details}

        Cr√©e une description attractive qui :
        ‚Ä¢ üî• Excite et motive les joueurs
        ‚Ä¢ üéØ Pr√©sente clairement les objectifs
        ‚Ä¢ ‚è∞ Donne les infos pratiques
        ‚Ä¢ üèÜ Met en avant les r√©compenses/enjeux

        150 mots max, avec emojis gaming appropri√©s.
        """
        
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"üìÖ √âv√©nement {event_type} pour {game} - {details.get('title', 'Session gaming')}"

    def _detect_message_type(self, message: str) -> str:
        """
        D√©tecte le type de message avec analyse contextuelle avanc√©e
        """
        message_lower = message.lower().strip()
        
        # Analyse de la structure et du contenu
        has_greeting = any(word in message_lower for word in 
                          ['salut', 'bonjour', 'bonsoir', 'hello', 'hey', 'hi', 'coucou'])
        
        # Mots-cl√©s techniques gaming (plus exhaustifs)
        tech_keywords = [
            # Builds et optimisation
            'build', 'dps', 'optimization', 'meta', 'scaling', 'stats', 'rotation', 
            'damage', 'gear', '√©quipement', 'config', 'setup', 'loadout',
            # Gameplay technique
            'strat√©gie', 'tactique', 'combo', 'timing', 'frame', 'hitbox',
            'farm', 'grind', 'efficiency', 'min-max', 'th√©orycraft',
            # Performance et comp√©tition
            'rank', 'mmr', 'elo', 'winrate', 'pro', 'tournament', 'comp',
            # M√©caniques de jeu
            'buff', 'debuff', 'proc', 'cooldown', 'mana', 'resource',
            'crit', 'penetration', 'resistance', 'armor', 'magic find'
        ]
        
        # Noms de jeux sp√©cifiques
        game_names = [
            'diablo', 'tarkov', 'wow', 'lol', 'valorant', 'eft', 'bg3',
            'helldivers', 'warhammer', 'valheim', 'destiny', 'poe'
        ]
        
        # Questions d'aide/conseil
        help_patterns = [
            'comment', 'aide', 'help', 'conseil', 'suggestion', 'recommand',
            'que faire', 'how to', 'what should', 'meilleur', 'optimal'
        ]
        
        # Analyse intelligente du contenu technique
        tech_score = sum(1 for keyword in tech_keywords if keyword in message_lower)
        game_score = sum(1 for game in game_names if game in message_lower)
        help_score = sum(1 for pattern in help_patterns if pattern in message_lower)
        
        # Structure du message
        has_question_mark = '?' in message
        message_length = len(message.split())
        
        # Logique de d√©cision contextuelle
        total_technical_content = tech_score + game_score + help_score
        
        # Salutation pure sans contenu technique
        if has_greeting and total_technical_content == 0 and message_length <= 4:
            if any(phrase in message_lower for phrase in 
                  ['comment vas-tu', '√ßa va', 'comment allez-vous', 'how are you']):
                return 'greeting_question'
            return 'greeting'
        
        # Salutations + questions techniques = priorit√© technique avec politesse
        if has_greeting and total_technical_content >= 2:
            return 'technical_with_greeting'
        
        # Contenu clairement technique (m√™me sans salutation)
        if total_technical_content >= 3 or (tech_score >= 2 and game_score >= 1):
            return 'technical'
        
        # Question d'aide g√©n√©rale
        if (has_question_mark or help_score >= 1) and total_technical_content >= 1:
            return 'question_with_context'
        
        # Question simple
        if has_question_mark or help_score >= 1:
            return 'question'
        
        return 'general'
        
# Instance globale
gemini_ai = GeminiAI()
