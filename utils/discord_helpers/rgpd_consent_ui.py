# üéÆ Interface de Consentement RGPD - Boutons Discord Interactifs
# Solution user-friendly pour le consentement RGPD avec boutons

import discord
from discord.ext import commands
import sys
import os

# Ajouter utils au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'utils'))

from datetime import datetime, timedelta
from config import RGPD_CONFIG
from utils.data_management.rgpd_conversation_memory import rgpd_conversation_memory
from utils.discord_helpers.embed_helpers import create_gaming_embed

# Cache temporaire pour les refus de consentement (√©viter de redemander imm√©diatement)
consent_declined_cache = {}


class ConsentView(discord.ui.View):
    """Vue avec boutons pour le consentement RGPD"""
    
    def __init__(self, user_id: int, bot: commands.Bot, original_message: discord.Message):
        super().__init__(timeout=300)  # 5 minutes pour d√©cider
        self.user_id = user_id
        self.bot = bot
        self.original_message = original_message
        self.responded = False
    
    @discord.ui.button(label=f"‚úÖ Activer la m√©moire ({RGPD_CONFIG['memory_duration_hours']}h)", style=discord.ButtonStyle.green, emoji='üß†')
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Accepter avec la dur√©e par d√©faut"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ce n'est pas pour toi !", ephemeral=True)
            return
        
        self.responded = True
        success = rgpd_conversation_memory.grant_user_consent(str(self.user_id))
        
        if success:
            success_embed = create_gaming_embed(
                title="üéÆ M√©moire activ√©e !",
                description=f"‚úÖ **Parfait !** Je me souviendrai de nos conversations pendant **{RGPD_CONFIG['memory_duration_hours']} heures**.\n\nJe r√©ponds √† ta question initiale maintenant ! üöÄ",
                color='success'
            )
            
            # R√©pondre d'abord avec la confirmation
            await interaction.response.edit_message(embed=success_embed, view=None)
            
            # Puis traiter la question initiale
            await self._process_original_question()
        else:
            success_embed = create_gaming_embed(
                title="‚ùå Erreur",
                description="Une erreur s'est produite. R√©essaie plus tard !",
                color='error'
            )
        
        # D√©sactiver tous les boutons
        for item in self.children:
            item.disabled = True
        
        await interaction.response.edit_message(embed=success_embed, view=self)
    
    @discord.ui.button(label='‚ùå Non merci', style=discord.ButtonStyle.gray, emoji='üö´')
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Refuser le stockage"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ce n'est pas pour toi !", ephemeral=True)
            return
        
        self.responded = True
        
        # M√©moriser le refus pour √©viter de redemander (30 jours)
        consent_declined_cache[self.user_id] = datetime.now() + timedelta(days=30)
        
        decline_embed = create_gaming_embed(
            title="‚úÖ Choix respect√©",
            description="**Aucun probl√®me !** Je continuerai √† t'aider sans m√©moire conversationnelle.\n\nTu peux changer d'avis √† tout moment avec `!privacy` ! üéÆ\n\n*Je ne te redemanderai plus pendant 30 jours.*",
            color='info'
        )
        
        # D√©sactiver tous les boutons
        for item in self.children:
            item.disabled = True
        
        await interaction.response.edit_message(embed=decline_embed, view=self)
        
        # R√©pondre √† la question initiale sans m√©moire
        await self._process_original_question_no_memory()
    
    @discord.ui.button(label='‚ÑπÔ∏è Plus d\'infos', style=discord.ButtonStyle.secondary, emoji='üìã')
    async def more_info(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Afficher plus d'informations RGPD"""
        
        info_embed = create_gaming_embed(
            title="üìã Information RGPD - MonBotGaming",
            description="D√©tails sur la collecte et le traitement de vos donn√©es personnelles",
            color='info'
        )
        
        info_embed.add_field(
            name="üìù Donn√©es collect√©es",
            value="‚Ä¢ Contenu des messages (chiffr√©)\n"
                  "‚Ä¢ Contexte de conversation\n"
                  "‚Ä¢ Pr√©f√©rences gaming d√©duites\n"
                  "‚Ä¢ Horodatage des interactions",
            inline=True
        )
        
        info_embed.add_field(
            name="üéØ Finalit√©s",
            value="‚Ä¢ Am√©liorer la qualit√© des r√©ponses\n"
                  "‚Ä¢ Maintenir le contexte conversationnel\n"
                  "‚Ä¢ Personnaliser l'assistance gaming\n"
                  "‚Ä¢ √âviter les r√©p√©titions",
            inline=True
        )
        
        info_embed.add_field(
            name="üîê S√©curit√©",
            value="‚Ä¢ Chiffrement AES-256\n"
                  "‚Ä¢ Hachage anonymisant des IDs\n"
                  "‚Ä¢ Suppression automatique\n"
                  "‚Ä¢ Acc√®s restreint aux donn√©es",
            inline=True
        )
        
        info_embed.add_field(
            name="‚è±Ô∏è Conservation",
            value=f"‚Ä¢ M√©moire conversationnelle: {RGPD_CONFIG['memory_duration_hours']}h\n"
                  f"‚Ä¢ Consentement utilisateur: {RGPD_CONFIG['consent_duration_days']} jours\n"
                  "‚Ä¢ Suppression automatique\n"
                  "‚Ä¢ Pas de sauvegarde long terme",
            inline=True
        )
        
        info_embed.add_field(
            name="üåç Transferts",
            value="‚Ä¢ Stockage local uniquement\n"
                  "‚Ä¢ Pas de transfert vers des tiers\n"
                  "‚Ä¢ Pas d'analyse externe\n"
                  "‚Ä¢ Donn√©es en France",
            inline=True
        )
        
        info_embed.add_field(
            name="‚öñÔ∏è Base l√©gale",
            value="‚Ä¢ Consentement explicite (Art. 6 RGPD)\n"
                  "‚Ä¢ R√©vocable √† tout moment\n"
                  "‚Ä¢ Dur√©e limit√©e\n"
                  "‚Ä¢ Finalit√© sp√©cifique",
            inline=True
        )
        
        info_embed.add_field(
            name="üìß Contact",
            value="Pour toute question sur vos donn√©es:\n"
                  "‚Ä¢ Utilisez les commandes `!privacy`\n"
                  "‚Ä¢ Droit √† l'information garanti\n"
                  "‚Ä¢ R√©ponse imm√©diate automatis√©e",
            inline=False
        )
        
        await interaction.response.send_message(embed=info_embed, ephemeral=True)
    
    async def _process_original_question(self):
        """Traite la question initiale apr√®s acceptation du consentement"""
        try:
            # Extraire le contenu du message sans la mention du bot
            content = self.original_message.content
            for mention in self.original_message.mentions:
                if mention == self.bot.user:
                    content = content.replace(f'<@{mention.id}>', '').replace(f'<@!{mention.id}>', '')
            
            content = content.strip()
            
            if content:
                # Importer les modules n√©cessaires
                from utils.ai.gemini_ai import gemini_ai
                from utils.ai.smart_response import SmartResponseManager
                from utils.discord_helpers.embed_helpers import create_ai_response_embed
                from utils.data_management.rgpd_conversation_memory import rgpd_conversation_memory
                
                if gemini_ai.is_available():
                    # Ajouter la question √† la m√©moire
                    rgpd_conversation_memory.add_message(str(self.user_id), content)
                    
                    # Analyser le type de r√©ponse
                    use_embed, embed_type = SmartResponseManager.should_use_embed(content)
                    
                    # G√©n√©rer la r√©ponse IA
                    response = await gemini_ai.gaming_assistant(content)
                    
                    if embed_type == 'light':
                        # Embed simple
                        simple_embed = discord.Embed(
                            description=response[:1000] if len(response) <= 1000 else response[:1000] + "...",
                            color=0x00ff88
                        )
                        await self.original_message.reply(embed=simple_embed)
                    elif use_embed:
                        # Embed complet
                        response_embed = create_ai_response_embed(content, response)
                        response_embed.description = response[:1000] if len(response) <= 1000 else response[:1000]
                        await self.original_message.reply(embed=response_embed)
                    else:
                        # R√©ponse simple
                        if len(response) <= 1500:
                            await self.original_message.reply(response)
                        else:
                            await self.original_message.reply(response[:1500] + "...")
                    
                    # Sauvegarder la r√©ponse du bot
                    rgpd_conversation_memory.add_message(
                        str(self.user_id),
                        response[:200] + "..." if len(response) > 200 else response,
                        is_bot=True
                    )
                else:
                    await self.original_message.reply("ü§ñ L'assistant gaming n'est pas disponible pour le moment.")
            else:
                # Pas de question, juste une salutation
                await self.original_message.reply(f"üéÆ Salut {self.original_message.author.mention} ! Maintenant que j'ai ma m√©moire, on peut discuter gaming ! üöÄ")
                
        except Exception as e:
            print(f"Erreur lors du traitement de la question initiale: {e}")
            await self.original_message.reply("üéÆ Je suis pr√™t √† t'aider maintenant ! Pose-moi tes questions gaming ! üöÄ")
    
    async def _process_original_question_no_memory(self):
        """Traite la question initiale sans m√©moire (apr√®s refus de consentement)"""
        try:
            # Extraire le contenu du message sans la mention du bot
            content = self.original_message.content
            for mention in self.original_message.mentions:
                if mention == self.bot.user:
                    content = content.replace(f'<@{mention.id}>', '').replace(f'<@!{mention.id}>', '')
            
            content = content.strip()
            
            if content:
                # Importer les modules n√©cessaires
                from utils.ai.gemini_ai import gemini_ai
                from utils.ai.smart_response import SmartResponseManager
                from utils.discord_helpers.embed_helpers import create_ai_response_embed
                
                if gemini_ai.is_available():
                    # Analyser le type de r√©ponse
                    use_embed, embed_type = SmartResponseManager.should_use_embed(content)
                    
                    # G√©n√©rer la r√©ponse IA SANS contexte
                    response = await gemini_ai.gaming_assistant(content, game_context="")
                    
                    if embed_type == 'light':
                        # Embed simple
                        simple_embed = discord.Embed(
                            description=response[:1000] if len(response) <= 1000 else response[:1000] + "...",
                            color=0x00ff88
                        )
                        await self.original_message.reply(embed=simple_embed)
                    elif use_embed:
                        # Embed complet
                        response_embed = create_ai_response_embed(content, response)
                        response_embed.description = response[:1000] if len(response) <= 1000 else response[:1000]
                        await self.original_message.reply(embed=response_embed)
                    else:
                        # R√©ponse simple
                        if len(response) <= 1500:
                            await self.original_message.reply(response)
                        else:
                            await self.original_message.reply(response[:1500] + "...")
                else:
                    await self.original_message.reply("ü§ñ L'assistant gaming n'est pas disponible pour le moment.")
            else:
                # Pas de question, juste une salutation
                await self.original_message.reply(f"üéÆ Salut {self.original_message.author.mention} ! En quoi puis-je t'aider ?")
                
        except Exception as e:
            print(f"Erreur lors du traitement de la question sans m√©moire: {e}")
            await self.original_message.reply("üéÆ En quoi puis-je t'aider gaming ? üöÄ")
    
    async def on_timeout(self):
        """Appel√© quand la vue expire"""
        if not self.responded:
            # D√©sactiver tous les boutons
            for item in self.children:
                item.disabled = True


class PrivacyManagementView(discord.ui.View):
    """Vue pour la gestion avanc√©e de la confidentialit√©"""
    
    def __init__(self, user_id: int):
        super().__init__(timeout=300)
        self.user_id = user_id
    
    @discord.ui.button(label='üìä Mes donn√©es', style=discord.ButtonStyle.blurple, emoji='üìä')
    async def view_data(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Voir ses donn√©es stock√©es"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ce n'est pas pour toi !", ephemeral=True)
            return
        
        has_consent, consent_data = rgpd_conversation_memory.check_user_consent(str(self.user_id))
        
        if not has_consent:
            status_embed = create_gaming_embed(
                title="üîí Tes donn√©es",
                description="‚ùå **Aucune donn√©e stock√©e**\n\nTu n'as pas donn√© ton consentement.",
                color='warning'
            )
        else:
            hashed_id = rgpd_conversation_memory._hash_user_id(str(self.user_id))
            message_count = len(rgpd_conversation_memory.conversations.get(hashed_id, []))
            consent_date = datetime.fromisoformat(consent_data.get('consent_date', ''))
            expiry_date = consent_date + timedelta(days=RGPD_CONFIG['consent_duration_days'])
            
            status_embed = create_gaming_embed(
                title="üîí Tes donn√©es",
                description="‚úÖ **Consentement actif**",
                color='success'
            )
            status_embed.add_field(
                name="üìä R√©sum√©",
                value=f"‚Ä¢ Messages en m√©moire: {message_count}\n"
                      f"‚Ä¢ Conservation des messages: {RGPD_CONFIG['memory_duration_hours']}h\n"
                      f"‚Ä¢ Accord√© le: {consent_date.strftime('%d/%m/%Y')}\n"
                      f"‚Ä¢ Expire le: {expiry_date.strftime('%d/%m/%Y')}",
                inline=False
            )
        
        await interaction.response.send_message(embed=status_embed, ephemeral=True)
    
    @discord.ui.button(label='üì¶ Exporter', style=discord.ButtonStyle.green, emoji='üì¶')
    async def export_data(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Exporter ses donn√©es - Conformit√© Article 20 RGPD"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ce n'est pas pour toi !", ephemeral=True)
            return
        
        try:
            import io
            
            export_data = rgpd_conversation_memory.export_user_data(str(self.user_id))
            
            if not export_data['consent_status']:
                await interaction.response.send_message("Vous n'avez pas de donn√©es √† exporter car vous n'avez pas donn√© votre consentement.", ephemeral=True)
                return

            # Cr√©er le contenu du fichier d'export
            export_text = f"=== EXPORT DE DONN√âES MONBOTGAMING ===\n\n"
            export_text += f"ID Utilisateur Anonymis√©: {export_data['user_id_hash']}\n"
            export_text += f"Date d'Export: {export_data['export_date']}\n"
            export_text += f"Consentement Accord√©: {'Oui' if export_data['consent_status'] else 'Non'}\n"
            export_text += f"Nombre de Messages en M√©moire: {export_data['conversations_count']}\n\n"
            
            if export_data.get('conversations'):
                export_text += "=== D√âTAIL DES CONVERSATIONS ===\n\n"
                for conv in export_data['conversations']:
                    sender = "Bot" if conv['is_bot'] else "Vous"
                    timestamp = datetime.fromisoformat(conv['timestamp']).strftime('%d/%m/%Y %H:%M:%S')
                    export_text += f"[{timestamp}] {sender}:\n{conv['content']}\n\n"
            else:
                export_text += "Aucune conversation en m√©moire.\n"

            export_text += "\n=== FIN DE L'EXPORT ===\n"
            export_text += "Note: Les donn√©es sont chiffr√©es et anonymis√©es conform√©ment au RGPD."

            # V√©rifier si le bot a la permission d'envoyer des fichiers
            can_attach_files = False
            if interaction.guild and interaction.channel:
                can_attach_files = interaction.channel.permissions_for(interaction.guild.me).attach_files
            else:
                can_attach_files = True  # Fallback pour les DM
            
            if can_attach_files:
                # Cr√©er un fichier en m√©moire (conforme Article 20 RGPD)
                export_file = io.BytesIO(export_text.encode('utf-8'))
                
                # Cr√©er l'embed de confirmation
                export_embed = create_gaming_embed(
                    title="üì¶ Export de tes donn√©es",
                    description="‚úÖ **Conformit√© Article 20 RGPD**\n\nTes donn√©es sont fournies dans un format structur√© et lisible.",
                    color='success'
                )
                export_embed.add_field(
                    name="üìÑ Fichier",
                    value="`export_donnees.txt`",
                    inline=True
                )
                export_embed.add_field(
                    name="üîí Confidentialit√©",
                    value="Ce message et le fichier ne sont visibles que par toi.",
                    inline=True
                )
                
                # Envoyer le message √©ph√©m√®re avec le fichier
                await interaction.response.send_message(
                    embed=export_embed, 
                    file=discord.File(export_file, filename="export_donnees.txt"),
                    ephemeral=True
                )
            else:
                # Fallback si pas de permission ATTACH_FILES
                export_embed = create_gaming_embed(
                    title="üì¶ Export de tes donn√©es",
                    description="‚ö†Ô∏è **Permission manquante**\n\nLe bot n'a pas la permission d'envoyer des fichiers. Tes donn√©es s'affichent ci-dessous.",
                    color='warning'
                )
                export_embed.add_field(
                    name="ÔøΩ Conformit√© RGPD",
                    value="Donn√©es fournies conform√©ment √† l'Article 20 (format lisible).",
                    inline=False
                )
                
                # Envoyer l'embed d'abord
                await interaction.response.send_message(embed=export_embed, ephemeral=True)
                
                # Puis envoyer les donn√©es en blocs si n√©cessaire
                if len(export_text) <= 1900:
                    await interaction.followup.send(f"```\n{export_text}\n```", ephemeral=True)
                else:
                    # D√©couper en plusieurs messages
                    chunks = [export_text[i:i+1900] for i in range(0, len(export_text), 1900)]
                    for i, chunk in enumerate(chunks):
                        header = f"üìÑ **Partie {i+1}/{len(chunks)}**\n" if len(chunks) > 1 else ""
                        await interaction.followup.send(f"{header}```\n{chunk}\n```", ephemeral=True)
        except Exception as e:
            print(f"Erreur lors de l'export de donn√©es (interface boutons): {e}")
            error_embed = create_gaming_embed(
                title="‚ùå Erreur d'export",
                description="Une erreur est survenue lors de la cr√©ation de ton fichier d'export. L'erreur a √©t√© enregistr√©e.",
                color='error'
            )
            await interaction.response.send_message(embed=error_embed, ephemeral=True)
    
    @discord.ui.button(label='üóëÔ∏è Tout supprimer', style=discord.ButtonStyle.red, emoji='üóëÔ∏è')
    async def forget_all(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Supprimer toutes ses donn√©es"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ce n'est pas pour toi !", ephemeral=True)
            return
        
        success = rgpd_conversation_memory.revoke_user_consent(str(self.user_id))
        
        if success:
            forget_embed = create_gaming_embed(
                title="üóëÔ∏è Donn√©es supprim√©es",
                description="‚úÖ **Droit √† l'oubli exerc√©**\n\nToutes tes donn√©es ont √©t√© d√©finitivement supprim√©es.",
                color='success'
            )
            forget_embed.add_field(
                name="üßπ Actions effectu√©es",
                value="‚Ä¢ Consentement r√©voqu√©\n‚Ä¢ Conversations effac√©es\n‚Ä¢ Donn√©es chiffr√©es supprim√©es\n‚Ä¢ Historique vid√©",
                inline=False
            )
        else:
            forget_embed = create_gaming_embed(
                title="‚ùå Erreur",
                description="Erreur lors de la suppression. R√©essaie plus tard !",
                color='error'
            )
        
        await interaction.response.send_message(embed=forget_embed, ephemeral=True)
    
    @discord.ui.button(label='‚úÖ Activer m√©moire', style=discord.ButtonStyle.green, emoji='üß†')
    async def activate_memory(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Activer la m√©moire conversationnelle"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Ce n'est pas pour toi !", ephemeral=True)
            return
        
        # Nettoyer le cache de refus
        clear_consent_cache_for_user(self.user_id)
        
        # Accorder le consentement
        success = rgpd_conversation_memory.grant_user_consent(str(self.user_id))
        
        if success:
            activate_embed = create_gaming_embed(
                title="üéÆ M√©moire activ√©e !",
                description=f"‚úÖ **Parfait !** Je me souviendrai maintenant de nos conversations pendant **{RGPD_CONFIG['memory_duration_hours']} heures**.",
                color='success'
            )
            activate_embed.add_field(
                name="üîê S√©curit√©",
                value=f"‚Ä¢ Donn√©es chiffr√©es et anonymis√©es\n‚Ä¢ Suppression automatique apr√®s {RGPD_CONFIG['memory_duration_hours']}h\n‚Ä¢ R√©vocable √† tout moment",
                inline=False
            )
        else:
            activate_embed = create_gaming_embed(
                title="‚ùå Erreur",
                description="Une erreur s'est produite lors de l'activation. R√©essaie plus tard !",
                color='error'
            )
        
        await interaction.response.send_message(embed=activate_embed, ephemeral=True)


def clear_consent_cache_for_user(user_id: int):
    """Nettoie le cache de refus pour un utilisateur sp√©cifique"""
    if user_id in consent_declined_cache:
        del consent_declined_cache[user_id]


async def show_consent_request(ctx, bot, original_message):
    """Affiche la demande de consentement avec boutons interactifs"""
    
    # V√©rifier si l'utilisateur a r√©cemment refus√© le consentement
    user_id = ctx.author.id
    if user_id in consent_declined_cache:
        if datetime.now() < consent_declined_cache[user_id]:
            # L'utilisateur a refus√© r√©cemment, ne pas redemander
            return False
        else:
            # Le d√©lai est expir√©, supprimer du cache
            del consent_declined_cache[user_id]
    
    consent_embed = create_gaming_embed(
        title="üéÆ Salut ! Configurons ta m√©moire gaming",
        description=f"Hey **{ctx.author.display_name}** ! üëã\n\nPour t'offrir la meilleure exp√©rience gaming, je peux garder en m√©moire nos conversations. **Ton choix !**",
        color='info'
    )
    
    consent_embed.add_field(
        name="üß† Avec la m√©moire, je peux :",
        value="‚Ä¢ Me souvenir de tes jeux favoris\n‚Ä¢ Maintenir le contexte entre messages\n‚Ä¢ Te donner des conseils personnalis√©s\n‚Ä¢ √âviter de r√©p√©ter les infos",
        inline=False
    )
    
    consent_embed.add_field(
        name="üîê S√©curit√© garantie :",
        value=f"‚Ä¢ Donn√©es chiffr√©es et anonymis√©es\n‚Ä¢ Suppression automatique apr√®s {RGPD_CONFIG['memory_duration_hours']}h\n‚Ä¢ Conforme RGPD\n‚Ä¢ R√©vocable √† tout moment",
        inline=False
    )
    
    consent_embed.add_field(
        name="‚è∞ Choisis ta dur√©e :",
        value=f"**{RGPD_CONFIG['memory_duration_hours']}h** = Parfait pour une session gaming\n**Refuser** = Pas de probl√®me !",
        inline=False
    )
    
    view = ConsentView(ctx.author.id, bot, original_message)
    
    try:
        await ctx.send(embed=consent_embed, view=view, ephemeral=True)
        return True
    except Exception as e:
        print(f"Erreur affichage consentement: {e}")
        return False



async def show_privacy_management(ctx):
    """Affiche l'interface de gestion de la confidentialit√©"""
    
    privacy_embed = create_gaming_embed(
        title="üîí Gestion de tes donn√©es",
        description="Contr√¥le total sur tes informations personnelles",
        color='info'
    )
    
    has_consent, consent_data = rgpd_conversation_memory.check_user_consent(ctx.author.id)
    
    if has_consent:
        privacy_embed.add_field(
            name="‚úÖ Statut actuel",
            value=f"M√©moire active ({RGPD_CONFIG['memory_duration_hours']}h)",
            inline=False
        )
    else:
        privacy_embed.add_field(
            name="‚ùå Statut actuel",
            value="Aucune donn√©e stock√©e",
            inline=False
        )
    
    privacy_embed.add_field(
        name="üéÆ Actions disponibles",
        value="Utilise les boutons ci-dessous pour g√©rer tes donn√©es",
        inline=False
    )
    
    view = PrivacyManagementView(ctx.author.id)
    
    try:
        await ctx.send(embed=privacy_embed, view=view, ephemeral=True)
        return True
    except Exception as e:
        print(f"Erreur gestion privacy: {e}")
        return False
