import sqlite3
import os

DATABASE_NAME = 'monbotgaming.db'
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'data', DATABASE_NAME)

class Database:
    def __init__(self, db_path=None):
        self.conn = None
        self.cursor = None
        self.db_path = db_path or DB_PATH
        self._connect()
        self._initialize_db()

    def _connect(self):
        """√âtablit la connexion √† la base de donn√©es."""
        try:
            self.conn = sqlite3.connect(self.db_path)
            self.cursor = self.conn.cursor()
            print(f"‚úÖ Connect√© √† la base de donn√©es : {self.db_path}")
        except sqlite3.Error as e:
            print(f"‚ùå Erreur de connexion √† la base de donn√©es : {e}")
            # G√©rer l'erreur de mani√®re plus robuste en production

    def _initialize_db(self):
        """Initialise les tables n√©cessaires si elles n'existent pas."""
        if not self.conn:
            return

        try:
            # Exemple de table pour les utilisateurs
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT NOT NULL,
                    last_activity TEXT,
                    consent_given INTEGER DEFAULT 0,
                    consent_date TEXT
                )
            """)
            # Exemple de table pour les builds de jeux
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS game_builds (
                    build_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    game_name TEXT NOT NULL,
                    build_name TEXT NOT NULL,
                    description TEXT,
                    author_id INTEGER,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (author_id) REFERENCES users(user_id)
                )
            """)
            self.conn.commit()
            print("‚úÖ Tables de la base de donn√©es v√©rifi√©es/cr√©√©es.")
        except sqlite3.Error as e:
            print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es : {e}")
            self.conn.rollback()

    def execute_query(self, query, params=()):
        """Ex√©cute une requ√™te SQL et retourne les r√©sultats."""
        if not self.conn:
            print("‚ö†Ô∏è Pas de connexion √† la base de donn√©es.")
            return None
        try:
            self.cursor.execute(query, params)
            self.conn.commit()
            return self.cursor.fetchall()
        except sqlite3.Error as e:
            print(f"‚ùå Erreur lors de l'ex√©cution de la requ√™te : {e}")
            self.conn.rollback()
            return None

    def close(self):
        """Ferme la connexion √† la base de donn√©es."""
        if self.conn:
            self.conn.close()
            print("üîå Connexion √† la base de donn√©es ferm√©e.")

# Instancier la base de donn√©es pour l'importation
# (utilise le chemin par d√©faut)
db = Database()

# Assurez-vous que le dossier 'data' existe
data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'data')
os.makedirs(data_dir, exist_ok=True)
