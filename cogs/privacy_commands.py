# üîí Privacy Commands pour MonBotGaming - Conformit√© RGPD
# Commandes de gestion des donn√©es personnelles et consentements

import discord
from discord.ext import commands
import sys
import os

# Ajouter utils au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'utils'))

from utils.rgpd_conversation_memory import rgpd_conversation_memory
from utils.embed_helpers import create_gaming_embed

class PrivacyCommands(commands.Cog):
    """
    Module de gestion de la confidentialit√© et RGPD
    Permet aux utilisateurs de g√©rer leurs donn√©es personnelles
    """    
    def __init__(self, bot):
        self.bot = bot
    
    @commands.group(name='privacy', invoke_without_command=True)
    async def privacy_commands(self, ctx):
        """Commandes de confidentialit√© RGPD - Interface moderne avec boutons"""
        
        from utils.rgpd_consent_ui import show_privacy_management
        
        # Utiliser la nouvelle interface avec boutons
        await show_privacy_management(ctx)
    
    @privacy_commands.command(name='status')
    async def privacy_status(self, ctx):
        """Affiche le statut de vos donn√©es stock√©es"""
        
        has_consent, consent_data = rgpd_conversation_memory.check_user_consent(ctx.author.id)
        
        if not has_consent:
            status_embed = create_gaming_embed(
                title="üîí Statut de vos donn√©es",
                description="‚ùå **Aucune donn√©e stock√©e**\n\nVous n'avez pas donn√© votre consentement pour le stockage de donn√©es.",
                color='warning'
            )
            status_embed.add_field(
                name="üí° Pour activer la m√©moire",
                value="Utilisez `!privacy accept [heures]` pour permettre au bot de se souvenir de nos conversations.",
                inline=False
            )
        else:
            # Calculer les stats
            hashed_id = rgpd_conversation_memory._hash_user_id(str(ctx.author.id))
            message_count = len(rgpd_conversation_memory.conversations.get(hashed_id, []))
            
            status_embed = create_gaming_embed(
                title="üîí Statut de vos donn√©es",
                description="‚úÖ **Consentement accord√©**\n\nVos donn√©es sont stock√©es de mani√®re s√©curis√©e.",
                color='success'
            )
            
            status_embed.add_field(
                name="üìä Donn√©es stock√©es",
                value=f"‚Ä¢ Messages en m√©moire: {message_count}\n"
                      f"‚Ä¢ Dur√©e de conservation: {consent_data.get('memory_duration_hours', 2)}h\n"
                      f"‚Ä¢ Consentement accord√©: {consent_data.get('consent_date', '')[:10]}\n"
                      f"‚Ä¢ Type de donn√©es: Contexte conversationnel chiffr√©",
                inline=False
            )
            
            status_embed.add_field(
                name="üîÑ Actions disponibles",
                value="`!privacy forget` - Supprimer toutes vos donn√©es\n"
                      "`!privacy export` - T√©l√©charger vos donn√©es",
                inline=False
            )
        
        await ctx.send(embed=status_embed)
    
    @privacy_commands.command(name='accept')
    async def privacy_accept(self, ctx, duration: int = 2):
        """Active la m√©moire conversationnelle - !privacy accept [heures]"""
        
        # Valider la dur√©e
        if duration < 1:
            duration = 1
        elif duration > 24:
            duration = 24
        
        # Accorder le consentement
        success = rgpd_conversation_memory.grant_user_consent(ctx.author.id, duration)
        
        if success:
            accept_embed = create_gaming_embed(
                title="‚úÖ Consentement accord√©",
                description=f"Merci ! Je peux maintenant garder en m√©moire nos conversations pendant **{duration}h**.",
                color='success'
            )
            
            accept_embed.add_field(
                name="üîê S√©curit√©",
                value="‚Ä¢ Vos donn√©es sont chiffr√©es (AES-256)\n"
                      "‚Ä¢ Suppression automatique apr√®s expiration\n"
                      "‚Ä¢ Aucune donn√©e personnelle identifiable stock√©e\n"
                      "‚Ä¢ Conformit√© RGPD garantie",
                inline=False
            )
            
            accept_embed.add_field(
                name="üîÑ R√©vocation",
                value="Vous pouvez r√©voquer ce consentement √† tout moment avec `!privacy forget`",
                inline=False
            )
        else:
            accept_embed = create_gaming_embed(
                title="‚ùå Erreur",
                description="Une erreur s'est produite lors de l'enregistrement de votre consentement.",
                color='error'
            )
        
        await ctx.send(embed=accept_embed)
    
    @privacy_commands.command(name='decline')
    async def privacy_decline(self, ctx):
        """Refuse le stockage de donn√©es"""
        
        decline_embed = create_gaming_embed(
            title="‚úÖ Choix respect√©",
            description="Aucune donn√©e ne sera stock√©e. Je continuerai √† vous aider sans m√©moire conversationnelle.",
            color='info'
        )
        
        decline_embed.add_field(
            name="üí° Fonctionnalit√©s limit√©es",
            value="Sans m√©moire, je ne pourrai pas:\n"
                  "‚Ä¢ Me souvenir de vos jeux pr√©f√©r√©s\n"
                  "‚Ä¢ Maintenir le contexte entre messages\n"
                  "‚Ä¢ Personnaliser mes r√©ponses",
            inline=False
        )
        
        decline_embed.add_field(
            name="üîÑ Changement d'avis",
            value="Vous pouvez activer la m√©moire plus tard avec `!privacy accept`",
            inline=False
        )
        
        await ctx.send(embed=decline_embed)
    
    @privacy_commands.command(name='forget')
    async def privacy_forget(self, ctx):
        """Supprime toutes vos donn√©es (droit √† l'oubli)"""
        
        # Supprimer toutes les donn√©es
        success = rgpd_conversation_memory.revoke_user_consent(ctx.author.id)
        
        if success:
            forget_embed = create_gaming_embed(
                title="üóëÔ∏è Donn√©es supprim√©es",
                description="‚úÖ **Droit √† l'oubli exerc√©**\n\nToutes vos donn√©es ont √©t√© d√©finitivement supprim√©es.",
                color='success'
            )
            
            forget_embed.add_field(
                name="üßπ Actions effectu√©es",
                value="‚Ä¢ Consentement r√©voqu√©\n"
                      "‚Ä¢ Conversations supprim√©es\n"
                      "‚Ä¢ Donn√©es chiffr√©es effac√©es\n"
                      "‚Ä¢ Historique vid√©",
                inline=False
            )
        else:
            forget_embed = create_gaming_embed(
                title="‚ùå Erreur",
                description="Une erreur s'est produite lors de la suppression.",
                color='error'
            )
        
        await ctx.send(embed=forget_embed)
    
    @privacy_commands.command(name='export')
    async def privacy_export(self, ctx):
        """Exporte vos donn√©es (droit √† la portabilit√©)"""
        
        # Exporter les donn√©es
        export_data = rgpd_conversation_memory.export_user_data(ctx.author.id)
        
        export_embed = create_gaming_embed(
            title="üì¶ Export de vos donn√©es",
            description="Voici toutes les donn√©es que MonBotGaming stocke √† votre sujet :",
            color='info'
        )
        
        export_embed.add_field(
            name="üìä Informations g√©n√©rales",
            value=f"‚Ä¢ ID anonymis√©: {export_data['user_id_hash']}\n"
                  f"‚Ä¢ Consentement: {'‚úÖ Accord√©' if export_data['consent_status'] else '‚ùå Non accord√©'}\n"
                  f"‚Ä¢ Conversations: {export_data['conversations_count']} messages\n"
                  f"‚Ä¢ Date d'export: {export_data['export_date'][:10]}",
            inline=False
        )
        
        if export_data['consent_status'] and export_data.get('conversations'):
            # Cr√©er un fichier avec les donn√©es
            export_text = "=== EXPORT DONN√âES MONBOTGAMING ===\n\n"
            export_text += f"Utilisateur: {export_data['user_id_hash']}\n"
            export_text += f"Date d'export: {export_data['export_date']}\n\n"
            export_text += "=== CONVERSATIONS ===\n"
            
            for conv in export_data['conversations']:
                sender = "Vous" if not conv['is_bot'] else "Bot"
                export_text += f"{conv['timestamp'][:19]} - {sender}: {conv['content']}\n"
            
            # Envoyer en fichier si possible (Discord limite)
            if len(export_text) < 1900:
                export_embed.add_field(
                    name="üí¨ Conversations",
                    value=f"```{export_text[-1800:]}```",
                    inline=False
                )
            else:
                export_embed.add_field(
                    name="üí¨ Conversations",
                    value="Trop de donn√©es pour affichage. Fichier g√©n√©r√© dans `data/exports/`",
                    inline=False
                )
        
        export_embed.add_field(
            name="üîí Note de confidentialit√©",
            value=export_data['note'],
            inline=False
        )
        
        await ctx.send(embed=export_embed)
    
    @privacy_commands.command(name='info')
    async def privacy_info(self, ctx):
        """Informations d√©taill√©es sur la gestion des donn√©es"""
        
        info_embed = create_gaming_embed(
            title="üìã Information RGPD - MonBotGaming",
            description="D√©tails sur la collecte et le traitement de vos donn√©es personnelles",
            color='info'
        )
        
        info_embed.add_field(
            name="üìù Donn√©es collect√©es",
            value="‚Ä¢ Contenu des messages (chiffr√©)\n"
                  "‚Ä¢ Contexte de conversation\n"
                  "‚Ä¢ Pr√©f√©rences gaming d√©duites\n"
                  "‚Ä¢ Horodatage des interactions",
            inline=True
        )
        
        info_embed.add_field(
            name="üéØ Finalit√©s",
            value="‚Ä¢ Am√©liorer la qualit√© des r√©ponses\n"
                  "‚Ä¢ Maintenir le contexte conversationnel\n"
                  "‚Ä¢ Personnaliser l'assistance gaming\n"
                  "‚Ä¢ √âviter les r√©p√©titions",
            inline=True
        )
        
        info_embed.add_field(
            name="üîê S√©curit√©",
            value="‚Ä¢ Chiffrement AES-256\n"
                  "‚Ä¢ Hachage anonymisant des IDs\n"
                  "‚Ä¢ Suppression automatique\n"
                  "‚Ä¢ Acc√®s restreint aux donn√©es",
            inline=True
        )
        
        info_embed.add_field(
            name="‚è±Ô∏è Conservation",
            value="‚Ä¢ Dur√©e configurable (1-24h)\n"
                  "‚Ä¢ Suppression automatique\n"
                  "‚Ä¢ Nettoyage quotidien\n"
                  "‚Ä¢ Pas de sauvegarde long terme",
            inline=True
        )
        
        info_embed.add_field(
            name="üåç Transferts",
            value="‚Ä¢ Stockage local uniquement\n"
                  "‚Ä¢ Pas de transfert vers des tiers\n"
                  "‚Ä¢ Pas d'analyse externe\n"
                  "‚Ä¢ Donn√©es en France",
            inline=True
        )
        
        info_embed.add_field(
            name="‚öñÔ∏è Base l√©gale",
            value="‚Ä¢ Consentement explicite (Art. 6 RGPD)\n"
                  "‚Ä¢ R√©vocable √† tout moment\n"
                  "‚Ä¢ Dur√©e limit√©e\n"
                  "‚Ä¢ Finalit√© sp√©cifique",
            inline=True
        )
        
        info_embed.add_field(
            name="üìß Contact",
            value="Pour toute question sur vos donn√©es:\n"
                  "‚Ä¢ Utilisez les commandes `!privacy`\n"
                  "‚Ä¢ Droit √† l'information garanti\n"
                  "‚Ä¢ R√©ponse imm√©diate automatis√©e",
            inline=False
        )
        
        await ctx.send(embed=info_embed)

async def setup(bot):
    """Charge le cog Privacy"""
    await bot.add_cog(PrivacyCommands(bot))
