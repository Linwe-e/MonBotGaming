# üîí Privacy Commands pour MonBotGaming - Conformit√© RGPD
# Commandes de gestion des donn√©es personnelles et consentements

import discord
from discord.ext import commands
import sys
import os

# Ajouter utils au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'utils'))

import io
from datetime import datetime, timedelta
from utils.data_management.rgpd_conversation_memory import rgpd_conversation_memory
from utils.discord_helpers.embed_helpers import create_gaming_embed
from config import RGPD_CONFIG

class PrivacyCommands(commands.Cog):
    """
    Module de gestion de la confidentialit√© et RGPD
    Permet aux utilisateurs de g√©rer leurs donn√©es personnelles
    """    
    def __init__(self, bot):
        self.bot = bot
    
    @commands.group(name='privacy', invoke_without_command=True)
    async def privacy_commands(self, ctx):
        """Commandes de confidentialit√© RGPD - Interface moderne avec boutons"""
        
        from utils.discord_helpers.rgpd_consent_ui import show_privacy_management
        
        # Utiliser la nouvelle interface avec boutons
        await show_privacy_management(ctx)
    
    @privacy_commands.command(name='status')
    async def privacy_status(self, ctx):
        """Affiche le statut de vos donn√©es stock√©es"""
        
        has_consent, consent_data = rgpd_conversation_memory.check_user_consent(ctx.author.id)
        
        if not has_consent:
            status_embed = create_gaming_embed(
                title="üîí Statut de vos donn√©es",
                description="‚ùå **Aucune donn√©e stock√©e**\n\nVous n'avez pas donn√© votre consentement pour le stockage de donn√©es.",
                color='warning'
            )
            status_embed.add_field(
                name="üí° Pour activer la m√©moire",
                value="Utilisez `!privacy accept` pour permettre au bot de se souvenir de nos conversations.",
                inline=False
            )
        else:
            # Calculer les stats
            hashed_id = rgpd_conversation_memory._hash_user_id(str(ctx.author.id))
            message_count = len(rgpd_conversation_memory.conversations.get(hashed_id, []))
            consent_date = datetime.fromisoformat(consent_data.get('consent_date', ''))
            expiry_date = consent_date + timedelta(days=RGPD_CONFIG['consent_duration_days'])
            
            status_embed = create_gaming_embed(
                title="üîí Statut de vos donn√©es",
                description="‚úÖ **Consentement accord√©**\n\nVos donn√©es sont stock√©es de mani√®re s√©curis√©e.",
                color='success'
            )
            
            status_embed.add_field(
                name="üìä Donn√©es stock√©es",
                value=f"‚Ä¢ Messages en m√©moire: {message_count}\n"
                      f"‚Ä¢ Conservation des messages: {RGPD_CONFIG['memory_duration_hours']}h\n"
                      f"‚Ä¢ Accord√© le: {consent_date.strftime('%d/%m/%Y')}\n"
                      f"‚Ä¢ Expire le: {expiry_date.strftime('%d/%m/%Y')}",
                inline=False
            )
            
            status_embed.add_field(
                name="üîÑ Actions disponibles",
                value="`!privacy forget` - Supprimer toutes vos donn√©es\n"
                      "`!privacy export` - Exporter vos donn√©es (Article 20 RGPD)",
                inline=False
            )
        
        await ctx.send(embed=status_embed, ephemeral=True)
    
    @privacy_commands.command(name='accept')
    async def privacy_accept(self, ctx):
        """Active la m√©moire conversationnelle"""
        
        # Accorder le consentement pour la dur√©e par d√©faut
        success = rgpd_conversation_memory.grant_user_consent(ctx.author.id)
        
        if success:
            accept_embed = create_gaming_embed(
                title="‚úÖ Consentement accord√©",
                description=f"Merci ! Je peux maintenant garder en m√©moire nos conversations pendant **{RGPD_CONFIG['memory_duration_hours']}h**.",
                color='success'
            )
            
            accept_embed.add_field(
                name="üîê S√©curit√© et Dur√©e",
                value=f"‚Ä¢ Votre consentement est valable pour **{RGPD_CONFIG['consent_duration_days']} jours**.\n"
                      f"‚Ä¢ Vos donn√©es sont chiffr√©es (AES-256).\n"
                      f"‚Ä¢ Suppression automatique des messages apr√®s {RGPD_CONFIG['memory_duration_hours']}h.\n"
                      "‚Ä¢ Conformit√© RGPD garantie.",
                inline=False
            )
            
            accept_embed.add_field(
                name="üîÑ R√©vocation",
                value="Vous pouvez r√©voquer ce consentement √† tout moment avec `!privacy forget`",
                inline=False
            )
        else:
            accept_embed = create_gaming_embed(
                title="‚ùå Erreur",
                description="Une erreur s'est produite lors de l'enregistrement de votre consentement.",
                color='error'
            )
        
        await ctx.send(embed=accept_embed, ephemeral=True)
    
    @privacy_commands.command(name='decline')
    async def privacy_decline(self, ctx):
        """Refuse le stockage de donn√©es"""
        
        decline_embed = create_gaming_embed(
            title="‚úÖ Choix respect√©",
            description="Aucune donn√©e ne sera stock√©e. Je continuerai √† vous aider sans m√©moire conversationnelle.",
            color='info'
        )
        
        decline_embed.add_field(
            name="üí° Fonctionnalit√©s limit√©es",
            value="Sans m√©moire, je ne pourrai pas:\n"
                  "‚Ä¢ Me souvenir de vos jeux pr√©f√©r√©s\n"
                  "‚Ä¢ Maintenir le contexte entre messages\n"
                  "‚Ä¢ Personnaliser mes r√©ponses",
            inline=False
        )
        
        decline_embed.add_field(
            name="üîÑ Changement d'avis",
            value="Vous pouvez activer la m√©moire plus tard avec `!privacy accept`",
            inline=False
        )
        
        await ctx.send(embed=decline_embed, ephemeral=True)
    
    @privacy_commands.command(name='consent')
    async def privacy_consent(self, ctx):
        """Force la redemande de consentement (si vous avez chang√© d'avis)"""
        
        from utils.discord_helpers.rgpd_consent_ui import consent_declined_cache, show_consent_request
        
        # Supprimer du cache de refus si pr√©sent
        if ctx.author.id in consent_declined_cache:
            del consent_declined_cache[ctx.author.id]
        
        # Cr√©er un message artificiel pour la demande de consentement
        class FakeMessage:
            def __init__(self, content, author, mentions):
                self.content = content
                self.author = author
                self.mentions = mentions
        
        fake_message = FakeMessage("@bot je veux changer d'avis sur le consentement", ctx.author, [ctx.bot.user])
        
        # Afficher la demande de consentement
        success = await show_consent_request(ctx, ctx.bot, fake_message)
        
        if not success:
            # Si la fonction ne fonctionne pas, afficher un message alternatif
            consent_embed = create_gaming_embed(
                title="üîÑ Changement de consentement",
                description="Voulez-vous maintenant autoriser le stockage de vos conversations ?",
                color='info'
            )
            await ctx.send(embed=consent_embed, ephemeral=True)
    
    # Commande forget supprim√©e - utilisez l'interface !privacy avec boutons
    # Commande export supprim√©e - utilisez l'interface !privacy avec boutons
    
    @privacy_commands.command(name='info')
    async def privacy_info(self, ctx):
        """Informations d√©taill√©es sur la gestion des donn√©es"""
        
        info_embed = create_gaming_embed(
            title="üìã Information RGPD - MonBotGaming",
            description="D√©tails sur la collecte et le traitement de vos donn√©es personnelles",
            color='info'
        )
        
        info_embed.add_field(
            name="üìù Donn√©es collect√©es",
            value="‚Ä¢ Contenu des messages (chiffr√©)\n"
                  "‚Ä¢ Contexte de conversation\n"
                  "‚Ä¢ Pr√©f√©rences gaming d√©duites\n"
                  "‚Ä¢ Horodatage des interactions",
            inline=True
        )
        
        info_embed.add_field(
            name="üéØ Finalit√©s",
            value="‚Ä¢ Am√©liorer la qualit√© des r√©ponses\n"
                  "‚Ä¢ Maintenir le contexte conversationnel\n"
                  "‚Ä¢ Personnaliser l'assistance gaming\n"
                  "‚Ä¢ √âviter les r√©p√©titions",
            inline=True
        )
        
        info_embed.add_field(
            name="üîê S√©curit√©",
            value="‚Ä¢ Chiffrement AES-256\n"
                  "‚Ä¢ Hachage anonymisant des IDs\n"
                  "‚Ä¢ Suppression automatique\n"
                  "‚Ä¢ Acc√®s restreint aux donn√©es",
            inline=True
        )
        
        info_embed.add_field(
            name="‚è±Ô∏è Conservation",
            value=f"‚Ä¢ M√©moire conversationnelle: {RGPD_CONFIG['memory_duration_hours']}h\n"
                  f"‚Ä¢ Consentement utilisateur: {RGPD_CONFIG['consent_duration_days']} jours\n"
                  "‚Ä¢ Suppression automatique\n"
                  "‚Ä¢ Pas de sauvegarde long terme",
            inline=True
        )
        
        info_embed.add_field(
            name="üåç Transferts",
            value="‚Ä¢ Stockage local uniquement\n"
                  "‚Ä¢ Pas de transfert vers des tiers\n"
                  "‚Ä¢ Pas d'analyse externe\n"
                  "‚Ä¢ Donn√©es en France",
            inline=True
        )
        
        info_embed.add_field(
            name="‚öñÔ∏è Base l√©gale",
            value="‚Ä¢ Consentement explicite (Art. 6 RGPD)\n"
                  "‚Ä¢ R√©vocable √† tout moment\n"
                  "‚Ä¢ Dur√©e limit√©e\n"
                  "‚Ä¢ Finalit√© sp√©cifique",
            inline=True
        )
        
        info_embed.add_field(
            name="üìß Contact",
            value="Pour toute question sur vos donn√©es:\n"
                  "‚Ä¢ Utilisez les commandes `!privacy`\n"
                  "‚Ä¢ Droit √† l'information garanti\n"
                  "‚Ä¢ R√©ponse imm√©diate automatis√©e",
            inline=False
        )
        
        await ctx.send(embed=info_embed, ephemeral=True)

async def setup(bot):
    """Charge le cog Privacy"""
    await bot.add_cog(PrivacyCommands(bot))
